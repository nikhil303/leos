<?xml version="1.0" encoding="UTF-8"?>
<!-- namespace-based configuration -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <sec:http pattern="${leos.api.filter.processor.url}" entry-point-ref="restAuthenticationEntryPoint" create-session="stateless">
        <sec:csrf disabled="true"/>
        <sec:custom-filter after="PRE_AUTH_FILTER" ref="leosApiAuthenticationFilter"/>
    </sec:http>

    <!-- Routing all requests to spring -->
    <sec:http use-expressions="true" entry-point-ref="http403EntryPoint">
        <sec:custom-filter after="PRE_AUTH_FILTER" ref="jeePreAuthenticatedFilter"/>
        <sec:session-management session-fixation-protection="none"/>
        <sec:csrf disabled="true"/> <!--Already handled by vaadin -->
        <!-- Done to allow download (FileDownloader Vaadin Component is using iframes -->
        <sec:headers>
            <sec:frame-options policy="SAMEORIGIN"/>
        </sec:headers>
    </sec:http>

    <bean id="leosApiAuthenticationFilter" class="eu.europa.ec.leos.api.auth.LeosApiAuthenticationFilter">
        <constructor-arg value="${leos.api.filter.processor.url}" />
        <constructor-arg ref="tokenService" />
        <property name="authenticationManager" ref="authenticationManager" />
        <property name="authenticationSuccessHandler" ref="leosApiAuthSuccessHandler" />
    </bean>

    <bean id="tokenService" class="eu.europa.ec.leos.security.JwtTokenService"/>

   <bean id="restAuthenticationEntryPoint" class="eu.europa.ec.leos.api.auth.RestAuthenticationEntryPoint"/>
   <bean id="leosApiAuthSuccessHandler" class="eu.europa.ec.leos.api.auth.LeosApiAuthSuccessHandler"/>

   <bean id="http403EntryPoint" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>
    
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="org.springframework.security.core.context.SecurityContextHolder" />
        <property name="targetMethod" value="setStrategyName" />
        <property name="arguments">
            <list>
                <value>MODE_INHERITABLETHREADLOCAL</value>
            </list>
        </property>
    </bean>

    <!-- J2EE pre-authentication filter is applied on any request coming via DelegatingFilterProxy -->
    <bean id="jeePreAuthenticatedFilter" class="org.springframework.security.web.authentication.preauth.j2ee.J2eePreAuthenticatedProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="continueFilterChainOnUnsuccessfulAuthentication" value="true"/>
        <property name="authenticationDetailsSource" ref="authenticationDetailsSource"/>
        <property name="authenticationFailureHandler" ref="jeePreAuthFailureHandler"/>
    </bean>

    <!-- Get the web.xml roles and populate the matching roles in Authentication object-->
    <bean id="authenticationDetailsSource" class="org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource">
        <property name="mappableRolesRetriever" ref="j2eeMappableRolesRetriever"/>
    </bean>

    <bean id="j2eeMappableRolesRetriever"
          class="org.springframework.security.web.authentication.preauth.j2ee.WebXmlMappableAttributesRetriever">
    </bean>

    <!-- preauthAuthProvider pulls authorities from the Authentication object and populate then in user details object-->
    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider ref="leosApiAuthenticationProvider"/>
        <sec:authentication-provider ref="preauthAuthProvider"/>
    </sec:authentication-manager>

    <bean id="preauthAuthProvider"
          class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
        <property name="preAuthenticatedUserDetailsService" ref="leosSecurityUserService"/>
    </bean>

     <!-- Service to allow custom loading of user details and authorities -->
    <bean id="leosSecurityUserService" class="eu.europa.ec.leos.security.LeosSecurityUserService">
        <constructor-arg>
            <bean class="eu.europa.ec.leos.integration.rest.UsersClientImpl"/>
        </constructor-arg>
    </bean>

    <bean id="leosApiAuthenticationProvider"
          class="eu.europa.ec.leos.api.auth.LeosApiAuthenticationProvider">
    </bean>

    <bean id="jeePreAuthFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <property name="useForward" value="true"/>
    </bean>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ AUTHORIZATION ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <sec:global-method-security pre-post-annotations="enabled">
        <sec:expression-handler ref="expressionHandler"/>
    </sec:global-method-security>

    <bean id="expressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
        <property name="permissionEvaluator" ref ="leosPermissionEvaluator"/>
        <!--Override default role prefix set by RoleVoter -->
        <property name="defaultRolePrefix" value=""/>
    </bean>

</beans>
